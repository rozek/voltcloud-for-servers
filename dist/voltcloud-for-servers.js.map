{"version":3,"file":"voltcloud-for-servers.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/javascript-interface-library/dist/javascript-interface-library.esm.js","../src/voltcloud-for-servers.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","//----------------------------------------------------------------------------//\n//                        JavaScript Interface Library                        //\n//----------------------------------------------------------------------------//\n/**** get a reference to the \"global\" object ****/\nvar global = /*#__PURE__*/ Function('return this')();\n// see https://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript\n//------------------------------------------------------------------------------\n//--                             Object Functions                             --\n//------------------------------------------------------------------------------\n// allow methods from Object.prototype to be applied to \"vanilla\" objects\n/**** Object_hasOwnProperty ****/\nfunction Object_hasOwnProperty(Value, PropertyName) {\n    return ((Value == null) || // let this method crash like its original\n        ('hasOwnProperty' in Value) && (typeof Value.hasOwnProperty === 'function')\n        ? Value.hasOwnProperty(PropertyName)\n        : Object.prototype.hasOwnProperty.call(Value, PropertyName));\n}\n/**** Object_isPrototypeOf ****/\nfunction Object_isPrototypeOf(Value, Candidate) {\n    return ((Value == null) || // let this method crash like its original\n        ('isPrototypeOf' in Value) && (typeof Value.isPrototypeOf === 'function')\n        ? Value.isPrototypeOf(Candidate)\n        : Object.prototype.isPrototypeOf.call(Value, Candidate));\n}\n/**** Object_propertyIsEnumerable ****/\nfunction Object_propertyIsEnumerable(Value, PropertyName) {\n    return ((Value == null) || // let this method crash like its original\n        ('propertyIsEnumerable' in Value) && (typeof Value.propertyIsEnumerable === 'function')\n        ? Value.propertyIsEnumerable(PropertyName)\n        : Object.prototype.propertyIsEnumerable.call(Value, PropertyName));\n}\n/**** Object_toString ****/\nfunction Object_toString(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('toString' in Value) && (typeof Value.toString === 'function')\n        ? Value.toString()\n        : Object.prototype.toString.call(Value));\n}\n/**** Object_toLocaleString ****/\nfunction Object_toLocaleString(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('toLocaleString' in Value) && (typeof Value.toLocaleString === 'function')\n        ? Value.toLocaleString()\n        : Object.prototype.toString.call(Value)); // a missing \"toLocaleString\" method will crash Object.prototype.toLocaleString\n}\n/**** Object_valueOf ****/\nfunction Object_valueOf(Value) {\n    return ((Value == null) || // let this method crash like its original\n        ('valueOf' in Value) && (typeof Value.valueOf === 'function')\n        ? Value.valueOf()\n        : Object.prototype.valueOf.call(Value));\n}\n/**** ObjectMergedWith ****/\nfunction ObjectMergedWith(TargetObject) {\n    var otherObjectList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherObjectList[_i - 1] = arguments[_i];\n    }\n    for (var i = 0, l = otherObjectList.length; i < l; i++) {\n        var otherObject = otherObjectList[i];\n        if (otherObject == null) {\n            continue;\n        }\n        if (typeof otherObject === 'object') {\n            for (var Key in otherObject) {\n                var Descriptor = Object.getOwnPropertyDescriptor(otherObject, Key);\n                if (Descriptor != null) {\n                    Object.defineProperty(TargetObject, Key, Descriptor);\n                }\n            }\n        }\n        else {\n            throwError('InvalidArgument: argument #' + (i + 1) + ' is not an object');\n        }\n    }\n    return TargetObject;\n}\n/**** throwError - simplifies construction of named errors ****/\nfunction throwError(Message) {\n    var Match = /^([$a-zA-Z][$a-zA-Z0-9]*):\\s*(\\S.+)\\s*$/.exec(Message);\n    if (Match == null) {\n        throw new Error(Message);\n    }\n    else {\n        var namedError = new Error(Match[2]);\n        namedError.name = Match[1];\n        throw namedError;\n    }\n}\n//------------------------------------------------------------------------------\n//--                      Value Classification Functions                      --\n//------------------------------------------------------------------------------\n/**** ValueExists ****/\nfunction ValueExists(Value) {\n    return (Value != null);\n}\n/**** ValueIsMissing ****/\nfunction ValueIsMissing(Value) {\n    return (Value == null);\n}\n/**** ValueIsBoolean ****/\nfunction ValueIsBoolean(Value) {\n    return (typeof Value === 'boolean') || (Value instanceof Boolean);\n}\n/**** ValueIsNumber ****/\nfunction ValueIsNumber(Value) {\n    return (typeof Value === 'number') || (Value instanceof Number);\n}\n/**** ValueIsFiniteNumber (pure \"isFinite\" breaks on objects) ****/\nfunction ValueIsFiniteNumber(Value) {\n    return ((typeof Value === 'number') || (Value instanceof Number)) && isFinite(Value.valueOf());\n}\n/**** ValueIsNaN (numeric, but NaN - this differs from pure \"isNaN\") ****/\nfunction ValueIsNaN(Value) {\n    return ((typeof Value === 'number') || (Value instanceof Number)) && isNaN(Value.valueOf());\n}\n/**** ValueIsNumberInRange ****/\nfunction ValueIsNumberInRange(Value, minValue, maxValue, withMin, withMax) {\n    if (withMin === void 0) { withMin = true; }\n    if (withMax === void 0) { withMax = true; }\n    if (!ValueIsNumber(Value) || isNaN(Value)) {\n        return false;\n    }\n    if (ValueIsFiniteNumber(minValue)) { // more robust than \"isFinite\" alone\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value < minValue) || (!withMin && (Value === minValue)) ||\n                (Value > maxValue) || (!withMax && (Value === maxValue))) {\n                return false;\n            }\n        }\n        else {\n            if ((Value < minValue) || (!withMin && (Value === minValue))) {\n                return false;\n            }\n        }\n    }\n    else {\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value > maxValue) || (!withMax && (Value === maxValue))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**** ValueIsInteger ****/\nfunction ValueIsInteger(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value);\n}\n/**** ValueIsIntegerInRange ****/\nfunction ValueIsIntegerInRange(Value, minValue, maxValue) {\n    if (!ValueIsInteger(Value) || isNaN(Value)) {\n        return false;\n    }\n    if (ValueIsFiniteNumber(minValue)) { // more robust than \"isFinite\" alone\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if ((Value < minValue) || (Value > maxValue)) {\n                return false;\n            }\n        }\n        else {\n            if (Value < minValue) {\n                return false;\n            }\n        }\n    }\n    else {\n        if (ValueIsFiniteNumber(maxValue)) { // more robust than \"isFinite\" alone\n            if (Value > maxValue) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**** ValueIsOrdinal ****/\nfunction ValueIsOrdinal(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 0);\n}\n/**** ValueIsCardinal ****/\nfunction ValueIsCardinal(Value) {\n    if ((typeof Value !== 'number') && !(Value instanceof Number)) {\n        return false;\n    }\n    Value = Value.valueOf();\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 1);\n}\n/**** ValueIsString ****/\nfunction ValueIsString(Value) {\n    return (typeof Value === 'string') || (Value instanceof String);\n}\n/**** ValueIs[Non]EmptyString ****/\nvar emptyStringPattern = /^\\s*$/;\nfunction ValueIsEmptyString(Value) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && emptyStringPattern.test(Value.valueOf());\n}\nfunction ValueIsNonEmptyString(Value) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && !emptyStringPattern.test(Value.valueOf());\n}\n/**** ValueIsStringMatching ****/\nfunction ValueIsStringMatching(Value, Pattern) {\n    return ((typeof Value === 'string') || (Value instanceof String)) && Pattern.test(Value.valueOf());\n}\n/**** ValueIsText ****/\nvar noCtrlCharsButCRLFPattern = /^[^\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsText(Value) {\n    return ValueIsStringMatching(Value, noCtrlCharsButCRLFPattern);\n}\n/**** ValueIsTextline ****/\nvar noCtrlCharsPattern = /^[^\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsTextline(Value) {\n    return ValueIsStringMatching(Value, noCtrlCharsPattern);\n}\n/**** ValueIsFunction ****/\nfunction ValueIsFunction(Value) {\n    return (typeof Value === 'function');\n}\n/**** ValueIsAnonymousFunction ****/\nfunction ValueIsAnonymousFunction(Value) {\n    return ((typeof Value === 'function') &&\n        ((Value.name == null) || (Value.name === '')));\n}\n/**** ValueIsNamedFunction ****/\nfunction ValueIsNamedFunction(Value) {\n    return ((typeof Value === 'function') &&\n        (Value.name != null) && (Value.name !== ''));\n}\n/**** ValueIsNativeFunction ****/\nfunction ValueIsNativeFunction(Value) {\n    return ((typeof Value === 'function') &&\n        /^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString()));\n}\n/**** ValueIsScriptedFunction ****/\nfunction ValueIsScriptedFunction(Value) {\n    return ((typeof Value === 'function') &&\n        !/^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString()));\n}\n/**** ValueIsObject ****/\nfunction ValueIsObject(Value) {\n    return (Value != null) && (typeof Value === 'object');\n}\n/**** ValueIsPlainObject ****/\nfunction ValueIsPlainObject(Value) {\n    return ((Value != null) && (typeof Value === 'object') &&\n        (Object.getPrototypeOf(Value) === Object.prototype));\n}\n/**** ValueIsVanillaObject ****/\nfunction ValueIsVanillaObject(Value) {\n    return ((Value != null) && (typeof Value === 'object') &&\n        !(Value instanceof Object));\n}\n/**** ValueIsArray ****/\nvar ValueIsArray = Array.isArray;\n/**** ValueIsList (\"dense\" array) ****/\nfunction ValueIsList(Value, minLength, maxLength) {\n    if (ValueIsArray(Value)) {\n        for (var i = 0, l = Value.length; i < l; i++) {\n            if (Value[i] === undefined) {\n                return false;\n            }\n        }\n        if (minLength != null) {\n            if (Value.length < minLength) {\n                return false;\n            }\n        }\n        if (maxLength != null) {\n            if (Value.length > maxLength) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n/**** ValueIsListSatisfying ****/\nfunction ValueIsListSatisfying(Value, Validator, minLength, maxLength) {\n    if (ValueIsArray(Value)) {\n        try {\n            for (var i = 0, l = Value.length; i < l; i++) {\n                if (Validator(Value[i]) == false) {\n                    return false;\n                }\n            }\n            if (minLength != null) {\n                if (Value.length < minLength) {\n                    return false;\n                }\n            }\n            if (maxLength != null) {\n                if (Value.length > maxLength) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        catch (Signal) { /* nop */ }\n    }\n    return false;\n}\n/**** ValueIsInstanceOf ****/\nfunction ValueIsInstanceOf(Value, Constructor) {\n    return (Value instanceof Constructor);\n}\n/**** ValueInheritsFrom ****/\nfunction ValueInheritsFrom(Value, Prototype) {\n    return Object_isPrototypeOf(Prototype, Value);\n}\n/**** ValueIsDate ****/\nfunction ValueIsDate(Value) {\n    return (Value instanceof Date);\n}\n/**** ValueIsError ****/\nfunction ValueIsError(Value) {\n    return (Value instanceof Error);\n}\n/**** ValueIsPromise ****/\nfunction ValueIsPromise(Value) {\n    return (Value != null) && (typeof Value.then === 'function');\n}\n// see https://stackoverflow.com/questions/27746304/how-do-i-tell-if-an-object-is-a-promise\n/**** ValueIsRegExp ****/\nfunction ValueIsRegExp(Value) {\n    return (Value instanceof RegExp);\n}\n/**** ValueIsOneOf ****/\nfunction ValueIsOneOf(Value, ValueList) {\n    return (ValueList.indexOf(Value) >= 0);\n} // no automatic unboxing of boxed values and vice-versa!\n/**** ValueIsColor ****/\nfunction ValueIsColor(Value) {\n    return ValueIsString(Value) && (ColorSet.hasOwnProperty(Value) ||\n        /^#[a-fA-F0-9]{6}$/.test(Value) ||\n        /^#[a-fA-F0-9]{8}$/.test(Value) ||\n        /^rgb\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+\\)$/.test(Value) || // not perfect\n        /^rgba\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+,([01]|[0]?[.][0-9]+)\\)$/.test(Value) // dto.\n    );\n}\n/**** ValueIsEMailAddress ****/\nvar EMailAddressPattern = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n// see https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression\nfunction ValueIsEMailAddress(Value) {\n    return ValueIsStringMatching(Value, EMailAddressPattern);\n}\n/**** ValueIsURL ****/\nvar noCtrlCharsOrWhitespacePattern = /^[^\\s\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/;\nfunction ValueIsURL(Value) {\n    if (!ValueIsStringMatching(Value, noCtrlCharsOrWhitespacePattern) ||\n        (Value === '')) {\n        return false;\n    }\n    try {\n        new URL(Value, 'file://');\n        return true;\n    }\n    catch (Signal) {\n        return false;\n    }\n}\n//------------------------------------------------------------------------------\n//--                      Argument Validation Functions                       --\n//------------------------------------------------------------------------------\nvar rejectNil = false;\nvar acceptNil = true;\n/**** validatedArgument ****/\nfunction validatedArgument(Description, Argument, ValueIsValid, NilIsAcceptable, Expectation) {\n    if (Argument == null) {\n        if (NilIsAcceptable) {\n            return Argument;\n        }\n        else {\n            throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n        }\n    }\n    else {\n        if (ValueIsValid(Argument)) {\n            switch (true) {\n                case Argument instanceof Boolean:\n                case Argument instanceof Number:\n                case Argument instanceof String:\n                    return Argument.valueOf(); // unboxes any primitives\n                default:\n                    return Argument;\n            }\n        }\n        else {\n            throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is no valid \" + escaped(Expectation));\n        }\n    }\n}\n/**** ValidatorForClassifier ****/\nfunction ValidatorForClassifier(Classifier, NilIsAcceptable, Expectation) {\n    var Validator = function (Description, Argument) {\n        return validatedArgument(Description, Argument, Classifier, NilIsAcceptable, Expectation);\n    };\n    var ClassifierName = Classifier.name;\n    if ((ClassifierName != null) && /^ValueIs/.test(ClassifierName)) {\n        var ValidatorName = ClassifierName.replace(// derive name from validator\n        /^ValueIs/, NilIsAcceptable ? 'allow' : 'expect');\n        return FunctionWithName(Validator, ValidatorName);\n    }\n    else {\n        return Validator; // without any specific name\n    }\n}\n/**** FunctionWithName (works with older JS engines as well) ****/\nfunction FunctionWithName(originalFunction, desiredName) {\n    if (originalFunction == null) {\n        throwError('MissingArgument: no function given');\n    }\n    if (typeof originalFunction !== 'function') {\n        throwError('InvalidArgument: the given 1st Argument is not a JavaScript function');\n    }\n    if (desiredName == null) {\n        throwError('MissingArgument: no desired name given');\n    }\n    if ((typeof desiredName !== 'string') && !(desiredName instanceof String)) {\n        throwError('InvalidArgument: the given desired name is not a string');\n    }\n    if (originalFunction.name === desiredName) {\n        return originalFunction;\n    }\n    try {\n        Object.defineProperty(originalFunction, 'name', { value: desiredName });\n        if (originalFunction.name === desiredName) {\n            return originalFunction;\n        }\n    }\n    catch (signal) { /* ok - let's take the hard way */ }\n    var renamed = new Function('originalFunction', 'return function ' + desiredName + ' () {' +\n        'return originalFunction.apply(this,Array.prototype.slice.apply(arguments))' +\n        '}');\n    return renamed(originalFunction);\n} // also works with older JavaScript engines\n/**** expect[ed]Value ****/\nfunction expectValue(Description, Argument) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    else {\n        return Argument.valueOf();\n    }\n}\nvar expectedValue = expectValue;\n/**** allow/expect[ed]Boolean ****/\nvar allowBoolean = /*#__PURE__*/ ValidatorForClassifier(ValueIsBoolean, acceptNil, 'boolean value'), allowedBoolean = allowBoolean;\nvar expectBoolean = /*#__PURE__*/ ValidatorForClassifier(ValueIsBoolean, rejectNil, 'boolean value'), expectedBoolean = expectBoolean;\n/**** allow/expect[ed]Number ****/\nvar allowNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsNumber, acceptNil, 'numeric value'), allowedNumber = allowNumber;\nvar expectNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsNumber, rejectNil, 'numeric value'), expectedNumber = expectNumber;\n/**** allow/expect[ed]FiniteNumber ****/\nvar allowFiniteNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsFiniteNumber, acceptNil, 'finite numeric value'), allowedFiniteNumber = allowFiniteNumber;\nvar expectFiniteNumber = /*#__PURE__*/ ValidatorForClassifier(ValueIsFiniteNumber, rejectNil, 'finite numeric value'), expectedFiniteNumber = expectFiniteNumber;\n/**** allow/expect[ed]NaN ****/\nvar allowNaN = /*#__PURE__*/ ValidatorForClassifier(ValueIsNaN, acceptNil, 'NaN value'), allowedNaN = allowNaN;\nvar expectNaN = /*#__PURE__*/ ValidatorForClassifier(ValueIsNaN, rejectNil, 'NaN value'), expectedNaN = expectNaN;\n/**** allow[ed]NumberInRange ****/\nfunction allowNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax) {\n    return (Argument == null\n        ? Argument\n        : expectedNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax));\n}\nvar allowedNumberInRange = allowNumberInRange;\n/**** expect[ed]NumberInRange ****/\nfunction expectNumberInRange(Description, Argument, minValue, maxValue, withMin, withMax) {\n    expectNumber(Description, Argument);\n    if (isNaN(Argument)) {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is not-a-number\");\n    }\n    if (withMin == null) {\n        withMin = true;\n    }\n    if (withMax == null) {\n        withMax = true;\n    }\n    if ((minValue != null) && isFinite(minValue)) {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument < minValue) || (!withMin && (Argument === minValue)) ||\n                (Argument > maxValue) || (!withMax && (Argument === maxValue))) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" (\" + Argument + \") is outside \" +\n                    (\"the allowed range (\" + minValue + \"...\" + maxValue + \")\"));\n            }\n        }\n        else {\n            if ((Argument < minValue) || (!withMin && (Argument === minValue))) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" is below the allowed \" +\n                    (\"minimum (\" + Argument + \" \" + (withMin ? '<' : '<=') + \" \" + minValue + \")\"));\n            }\n        }\n    }\n    else {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument > maxValue) || (!withMax && (Argument === maxValue))) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" exceeds the allowed \" +\n                    (\"maximum (\" + Argument + \" \" + (withMax ? '>' : '>=') + \" \" + maxValue + \")\"));\n            }\n        }\n    }\n    return Argument.valueOf();\n}\nvar expectedNumberInRange = expectNumberInRange;\n/**** allow/expect[ed]Integer ****/\nvar allowInteger = /*#__PURE__*/ ValidatorForClassifier(ValueIsInteger, acceptNil, 'integral numeric value'), allowedInteger = allowInteger;\nvar expectInteger = /*#__PURE__*/ ValidatorForClassifier(ValueIsInteger, rejectNil, 'integral numeric value'), expectedInteger = expectInteger;\n/**** allow[ed]IntegerInRange ****/\nfunction allowIntegerInRange(Description, Argument, minValue, maxValue) {\n    return (Argument == null\n        ? Argument\n        : expectedIntegerInRange(Description, Argument, minValue, maxValue));\n}\nvar allowedIntegerInRange = allowIntegerInRange;\n/**** expect[ed]IntegerInRange ****/\nfunction expectIntegerInRange(Description, Argument, minValue, maxValue) {\n    expectInteger(Description, Argument);\n    if (isNaN(Argument)) {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is not-a-number\");\n    }\n    if ((minValue != null) && isFinite(minValue)) {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if ((Argument < minValue) || (Argument > maxValue)) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" (\" + Argument + \") is outside \" +\n                    (\"the allowed range (\" + minValue + \"...\" + maxValue + \")\"));\n            }\n        }\n        else {\n            if (Argument < minValue) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" is below the allowed \" +\n                    (\"minimum (\" + Argument + \" < \" + minValue + \")\"));\n            }\n        }\n    }\n    else {\n        if ((maxValue != null) && isFinite(maxValue)) {\n            if (Argument > maxValue) {\n                throw new RangeError(\"the given \" + escaped(Description) + \" exceeds the allowed \" +\n                    (\"maximum (\" + Argument + \" > \" + maxValue + \")\"));\n            }\n        }\n    }\n    return Argument.valueOf();\n}\nvar expectedIntegerInRange = expectIntegerInRange;\n/**** allow/expect[ed]Ordinal ****/\nvar allowOrdinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsOrdinal, acceptNil, 'ordinal number'), allowedOrdinal = allowOrdinal;\nvar expectOrdinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsOrdinal, rejectNil, 'ordinal number'), expectedOrdinal = expectOrdinal;\n/**** allow/expect[ed]Cardinal ****/\nvar allowCardinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsCardinal, acceptNil, 'cardinal number'), allowedCardinal = allowCardinal;\nvar expectCardinal = /*#__PURE__*/ ValidatorForClassifier(ValueIsCardinal, rejectNil, 'cardinal number'), expectedCardinal = expectCardinal;\n/**** allow/expect[ed]String ****/\nvar allowString = /*#__PURE__*/ ValidatorForClassifier(ValueIsString, acceptNil, 'literal string'), allowedString = allowString;\nvar expectString = /*#__PURE__*/ ValidatorForClassifier(ValueIsString, rejectNil, 'literal string'), expectedString = expectString;\n/**** allow/expect[ed]NonEmptyString ****/\nvar allowNonEmptyString = /*#__PURE__*/ ValidatorForClassifier(ValueIsNonEmptyString, acceptNil, 'non-empty literal string'), allowedNonEmptyString = allowNonEmptyString;\nvar expectNonEmptyString = /*#__PURE__*/ ValidatorForClassifier(ValueIsNonEmptyString, rejectNil, 'non-empty literal string'), expectedNonEmptyString = expectNonEmptyString;\n/**** allow[ed]StringMatching ****/\nfunction allowStringMatching(Description, Argument, Pattern) {\n    return (Argument == null\n        ? Argument\n        : expectedStringMatching(Description, Argument, Pattern));\n}\nvar allowedStringMatching = allowStringMatching;\n/**** expect[ed]StringMatching ****/\nfunction expectStringMatching(Description, Argument, Pattern) {\n    expectString(Description, Argument);\n    if (Pattern.test(Argument)) {\n        return Argument.valueOf();\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" does not match the specified pattern\");\n    }\n}\nvar expectedStringMatching = expectStringMatching;\n/**** allow/expect[ed]Text ****/\nvar allowText = /*#__PURE__*/ ValidatorForClassifier(ValueIsText, acceptNil, 'literal text'), allowedText = allowText;\nvar expectText = /*#__PURE__*/ ValidatorForClassifier(ValueIsText, rejectNil, 'literal text'), expectedText = expectText;\n/**** allow/expect[ed]Textline ****/\nvar allowTextline = /*#__PURE__*/ ValidatorForClassifier(ValueIsTextline, acceptNil, 'single line of text'), allowedTextline = allowTextline;\nvar expectTextline = /*#__PURE__*/ ValidatorForClassifier(ValueIsTextline, rejectNil, 'single line of text'), expectedTextline = expectTextline;\n/**** allow/expect[ed]Function ****/\nvar allowFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsFunction, acceptNil, 'JavaScript function'), allowedFunction = allowFunction;\nvar expectFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsFunction, rejectNil, 'JavaScript function'), expectedFunction = expectFunction;\n/**** allow/expect[ed]AnonymousFunction ****/\nvar allowAnonymousFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsAnonymousFunction, acceptNil, 'anonymous JavaScript function'), allowedAnonymousFunction = allowAnonymousFunction;\nvar expectAnonymousFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsAnonymousFunction, rejectNil, 'anonymous JavaScript function'), expectedAnonymousFunction = expectAnonymousFunction;\n/**** allow/expect[ed]NamedFunction ****/\nvar allowNamedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNamedFunction, acceptNil, 'named JavaScript function'), allowedNamedFunction = allowNamedFunction;\nvar expectNamedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNamedFunction, rejectNil, 'named JavaScript function'), expectedNamedFunction = expectNamedFunction;\n/**** allow/expect[ed]NativeFunction ****/\nvar allowNativeFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNativeFunction, acceptNil, 'native JavaScript function'), allowedNativeFunction = allowNativeFunction;\nvar expectNativeFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsNativeFunction, rejectNil, 'native JavaScript function'), expectedNativeFunction = expectNativeFunction;\n/**** allow/expect[ed]ScriptedFunction ****/\nvar allowScriptedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsScriptedFunction, acceptNil, 'scripted JavaScript function'), allowedScriptedFunction = allowScriptedFunction;\nvar expectScriptedFunction = /*#__PURE__*/ ValidatorForClassifier(ValueIsScriptedFunction, rejectNil, 'scripted JavaScript function'), expectedScriptedFunction = expectScriptedFunction;\n/**** allow/expect[ed]Object ****/\nvar allowObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsObject, acceptNil, 'JavaScript object'), allowedObject = allowObject;\nvar expectObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsObject, rejectNil, 'JavaScript object'), expectedObject = expectObject;\n/**** allow/expect[ed]PlainObject ****/\nvar allowPlainObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsPlainObject, acceptNil, '\"plain\" JavaScript object'), allowedPlainObject = allowPlainObject;\nvar expectPlainObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsPlainObject, rejectNil, '\"plain\" JavaScript object'), expectedPlainObject = expectPlainObject;\n/**** allow/expect[ed]VanillaObject ****/\nvar allowVanillaObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsVanillaObject, acceptNil, '\"vanilla\" JavaScript object'), allowedVanillaObject = allowVanillaObject;\nvar expectVanillaObject = /*#__PURE__*/ ValidatorForClassifier(ValueIsVanillaObject, rejectNil, '\"vanilla\" JavaScript object'), expectedVanillaObject = expectVanillaObject;\n/**** allow[ed]Array ****/\nfunction allowArray(Description, Argument) {\n    return (Argument == null\n        ? Argument\n        : expectedArray(Description, Argument));\n}\nvar allowedArray = allowArray;\n/**** expect[ed]Array ****/\nfunction expectArray(Description, Argument) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (ValueIsArray(Argument)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is no JavaScript array\");\n    }\n}\nvar expectedArray = expectArray;\n/**** allow[ed]List ****/\nfunction allowList(Description, Argument, Expectation, minLength, maxLength) {\n    return (Argument == null\n        ? Argument\n        : expectedList(Description, Argument, Expectation, minLength, maxLength));\n}\nvar allowedList = allowList;\n/**** expect[ed]List ****/\nfunction expectList(Description, Argument, Expectation, minLength, maxLength) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (ValueIsList(Argument, minLength, maxLength)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is \" + (Expectation == null\n            ? 'either not a list or contains an invalid number of elements'\n            : 'no ' + escaped(Expectation)));\n    }\n}\nvar expectedList = expectList;\n/**** allow[ed]ListSatisfying ****/\nfunction allowListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength) {\n    return (Argument == null\n        ? Argument\n        : expectedListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength));\n}\nvar allowedListSatisfying = allowListSatisfying;\n/**** expect[ed]ListSatisfying ****/\nfunction expectListSatisfying(Description, Argument, Validator, Expectation, minLength, maxLength) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (ValueIsListSatisfying(Argument, Validator, minLength, maxLength)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is \" + (Expectation == null\n            ? 'either not a list or contains invalid elements'\n            : 'no ' + escaped(Expectation)));\n    }\n}\nvar expectedListSatisfying = expectListSatisfying;\n/**** allow[ed]InstanceOf ****/\nfunction allowInstanceOf(Description, Argument, constructor, Expectation) {\n    return (Argument == null\n        ? Argument\n        : expectedInstanceOf(Description, Argument, constructor, Expectation));\n}\nvar allowedInstanceOf = allowInstanceOf;\n/**** expect[ed]InstanceOf ****/\nfunction expectInstanceOf(Description, Argument, constructor, Expectation) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (!(Argument instanceof constructor)) {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is no \" + escaped(Expectation));\n    }\n    return Argument;\n}\nvar expectedInstanceOf = expectInstanceOf;\n/**** allow[ed]ValueInheritingFrom ****/\nfunction allowValueInheritingFrom(Description, Argument, prototype, Expectation) {\n    return (Argument == null\n        ? Argument\n        : expectedValueInheritingFrom(Description, Argument, prototype, Expectation));\n}\nvar allowedValueInheritingFrom = allowValueInheritingFrom;\n/**** expect[ed]ValueInheritingFrom ****/\nfunction expectValueInheritingFrom(Description, Argument, prototype, Expectation) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (prototype.isPrototypeOf(Argument)) {\n        return Argument;\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is no \" + escaped(Expectation));\n    }\n}\nvar expectedValueInheritingFrom = expectValueInheritingFrom;\n/**** allow/expect[ed]Date ****/\nvar allowDate = /*#__PURE__*/ ValidatorForClassifier(ValueIsDate, acceptNil, 'JavaScript Date object'), allowedDate = allowDate;\nvar expectDate = /*#__PURE__*/ ValidatorForClassifier(ValueIsDate, rejectNil, 'JavaScript Date object'), expectedDate = expectDate;\n/**** allow/expect[ed]Error ****/\nvar allowError = /*#__PURE__*/ ValidatorForClassifier(ValueIsError, acceptNil, 'JavaScript Error object'), allowedError = allowError;\nvar expectError = /*#__PURE__*/ ValidatorForClassifier(ValueIsError, rejectNil, 'JavaScript Error object'), expectedError = expectError;\n/**** allow/expect[ed]Promise ****/\nvar allowPromise = /*#__PURE__*/ ValidatorForClassifier(ValueIsPromise, acceptNil, 'JavaScript Promise (or \"Thenable\") object'), allowedPromise = allowPromise;\nvar expectPromise = /*#__PURE__*/ ValidatorForClassifier(ValueIsPromise, rejectNil, 'JavaScript Promise (or \"Thenable\") object'), expectedPromise = expectPromise;\n/**** allow/expect[ed]RegExp ****/\nvar allowRegExp = /*#__PURE__*/ ValidatorForClassifier(ValueIsRegExp, acceptNil, 'JavaScript RegExp object'), allowedRegExp = allowRegExp;\nvar expectRegExp = /*#__PURE__*/ ValidatorForClassifier(ValueIsRegExp, rejectNil, 'JavaScript RegExp object'), expectedRegExp = expectRegExp;\n/**** allow[ed]OneOf ****/\nfunction allowOneOf(Description, Argument, ValueList) {\n    return (Argument == null\n        ? Argument\n        : expectedOneOf(Description, Argument, ValueList));\n}\nvar allowedOneOf = allowOneOf;\n/**** expect[ed]OneOf ****/\nfunction expectOneOf(Description, Argument, ValueList) {\n    if (Argument == null) {\n        throwError(\"MissingArgument: no \" + escaped(Description) + \" given\");\n    }\n    if (ValueIsOneOf(Argument, ValueList)) {\n        return ( // unboxes any primitives\n        (Argument == null) || (typeof Argument.valueOf !== 'function')\n            ? Argument\n            : Argument.valueOf());\n    }\n    else {\n        throwError(\"InvalidArgument: the given \" + escaped(Description) + \" is not among the supported values\");\n    }\n}\nvar expectedOneOf = expectOneOf;\n/**** allow/expect[ed]Color ****/\nvar allowColor = /*#__PURE__*/ ValidatorForClassifier(ValueIsColor, acceptNil, 'valid CSS color specification'), allowedColor = allowColor;\nvar expectColor = /*#__PURE__*/ ValidatorForClassifier(ValueIsColor, rejectNil, 'valid CSS color specification'), expectedColor = expectColor;\n/**** allow/expect[ed]EMailAddress ****/\nvar allowEMailAddress = /*#__PURE__*/ ValidatorForClassifier(ValueIsEMailAddress, acceptNil, 'valid EMail address'), allowedEMailAddress = allowEMailAddress;\nvar expectEMailAddress = /*#__PURE__*/ ValidatorForClassifier(ValueIsEMailAddress, rejectNil, 'valid EMail address'), expectedEMailAddress = expectEMailAddress;\n/**** allow/expect[ed]URL ****/\nvar allowURL = /*#__PURE__*/ ValidatorForClassifier(ValueIsURL, acceptNil, 'valid URL'), allowedURL = allowURL;\nvar expectURL = /*#__PURE__*/ ValidatorForClassifier(ValueIsURL, rejectNil, 'valid URL'), expectedURL = expectURL;\n/**** escaped - escapes all control characters in a given string ****/\nfunction escaped(Text) {\n    var EscapeSequencePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?/g;\n    var CtrlCharCodePattern = /[\\x00-\\x1f\\x7f-\\x9f]/g;\n    return Text\n        .replace(EscapeSequencePattern, function (Match) {\n        return (Match === '\\\\' ? '\\\\\\\\' : Match);\n    })\n        .replace(CtrlCharCodePattern, function (Match) {\n        switch (Match) {\n            case '\\0': return '\\\\0';\n            case '\\b': return '\\\\b';\n            case '\\f': return '\\\\f';\n            case '\\n': return '\\\\n';\n            case '\\r': return '\\\\r';\n            case '\\t': return '\\\\t';\n            case '\\v': return '\\\\v';\n            default: {\n                var HexCode = Match.charCodeAt(0).toString(16);\n                return '\\\\x' + '00'.slice(HexCode.length) + HexCode;\n            }\n        }\n    });\n}\n/**** unescaped - evaluates all escape sequences in a given string ****/\nfunction unescaped(Text) {\n    var EscapeSequencePattern = /\\\\[0bfnrtv'\"\\\\\\/]|\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}/g;\n    return Text\n        .replace(EscapeSequencePattern, function (Match) {\n        switch (Match) {\n            case '\\\\0': return '\\0';\n            case '\\\\b': return '\\b';\n            case '\\\\f': return '\\f';\n            case '\\\\n': return '\\n';\n            case '\\\\r': return '\\r';\n            case '\\\\t': return '\\t';\n            case '\\\\v': return '\\v';\n            case '\\\\\\'': return \"'\";\n            case '\\\\\"': return '\"';\n            case '\\\\\\\\': return \"\\\\\";\n            default: {\n                var CharCode = parseInt(Match.slice(2), 16);\n                return String.fromCharCode(CharCode);\n            }\n        }\n    });\n}\n/**** quotable - makes a given string ready to be put in single/double quotes ****/\nfunction quotable(Text, Quote) {\n    if (Quote === void 0) { Quote = '\"'; }\n    var EscSeqOrSglQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|'/g;\n    var EscSeqOrDblQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|\"/g;\n    var CtrlCharCodePattern = /[\\x00-\\x1f\\x7f-\\x9f]/g;\n    return Text\n        .replace(Quote === \"'\" ? EscSeqOrSglQuotePattern : EscSeqOrDblQuotePattern, function (Match) {\n        switch (Match) {\n            case \"'\": return \"\\\\'\";\n            case '\"': return '\\\\\"';\n            case '\\\\': return '\\\\\\\\';\n            default: return Match;\n        }\n    })\n        .replace(CtrlCharCodePattern, function (Match) {\n        switch (Match) {\n            case '\\0': return '\\\\0';\n            case '\\b': return '\\\\b';\n            case '\\f': return '\\\\f';\n            case '\\n': return '\\\\n';\n            case '\\r': return '\\\\r';\n            case '\\t': return '\\\\t';\n            case '\\v': return '\\\\v';\n            default: {\n                var HexCode = Match.charCodeAt(0).toString(16);\n                return '\\\\x' + '00'.slice(HexCode.length) + HexCode;\n            }\n        }\n    });\n}\n/**** quoted ****/\nfunction quoted(Text, Quote) {\n    if (Quote === void 0) { Quote = '\"'; }\n    return Quote + quotable(Text, Quote) + Quote;\n}\n/**** HTMLsafe ****/\nfunction HTMLsafe(Argument, EOLReplacement) {\n    EOLReplacement = (EOLReplacement || '').trim() || '<br/>';\n    return Argument.replace(/[&<>\"'\\u0000-\\u001F\\u007F-\\u009F\\\\]/g, function (Match) {\n        switch (Match) {\n            case '&': return '&amp;';\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '\"': return '&quot;';\n            case \"'\": return '&apos;';\n            case '\\b': return '&#92;b';\n            case '\\f': return '&#92;f';\n            case '\\n': return EOLReplacement;\n            case '\\r': return '&#92;r';\n            case '\\t': return '&#92;t';\n            case '\\v': return '&#92;v';\n            case '\\\\': return '&#92;';\n            default:\n                var Result = Match.charCodeAt(0).toString(16);\n                return '&#x0000'.substring(3, 7 - Result.length) + Result + ';';\n        }\n    });\n}\n/**** MarkDownSafe ****/\nfunction MarkDownSafe(Argument, EOLReplacement) {\n    return HTMLsafe(Argument, EOLReplacement).replace(/:/g, '&#58;');\n}\n/**** ValuesDiffer ****/\nfunction ValuesDiffer(thisValue, otherValue, Mode) {\n    if (thisValue === otherValue) {\n        return false;\n    }\n    var thisType = typeof thisValue;\n    if (thisType !== typeof otherValue) {\n        return true;\n    }\n    /**** ArraysDiffer ****/\n    function ArraysDiffer(thisArray, otherArray, Mode) {\n        if (!Array.isArray(otherArray)) {\n            return true;\n        }\n        if (thisArray.length !== otherArray.length) {\n            return true;\n        }\n        for (var i = 0, l = thisArray.length; i < l; i++) {\n            if (ValuesDiffer(thisArray[i], otherArray[i], Mode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**** ObjectsDiffer ****/\n    function ObjectsDiffer(thisObject, otherObject, Mode) {\n        if (Object.getPrototypeOf(thisObject) !== Object.getPrototypeOf(otherObject)) {\n            return true;\n        }\n        for (var key in thisObject) {\n            if (!(key in otherObject)) {\n                return true;\n            }\n        }\n        for (var key in otherObject) {\n            if (!(key in thisObject)) {\n                return true;\n            }\n            if (ValuesDiffer(thisObject[key], otherObject[key], Mode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    switch (thisType) {\n        case 'undefined':\n        case 'boolean':\n        case 'string':\n        case 'function': return true; // most primitives are compared using \"===\"\n        case 'number': return ((isNaN(thisValue) !== isNaN(otherValue)) ||\n            (Math.abs(thisValue - otherValue) > Number.EPSILON));\n        case 'object':\n            if (thisValue == null) {\n                return true;\n            } // since \"other_value\" != null!\n            if (otherValue == null) {\n                return true;\n            } // since \"this_value\" != null!\n            if ((Mode === 'by-value') && ((thisValue instanceof Boolean) ||\n                (thisValue instanceof Number) ||\n                (thisValue instanceof String))) {\n                return (thisValue.valueOf() !== otherValue.valueOf());\n            }\n            if (Array.isArray(thisValue)) {\n                return ArraysDiffer(thisValue, otherValue, Mode);\n            }\n            return (Mode === 'by-reference'\n                ? true // because (thisValue !== otherValue)\n                : ObjectsDiffer(thisValue, otherValue, Mode));\n        default: return true; // unsupported property type\n    }\n    return true;\n}\n/**** ValuesAreEqual ****/\nfunction ValuesAreEqual(thisValue, otherValue, Mode) {\n    return !ValuesDiffer(thisValue, otherValue, Mode);\n}\n/**** ObjectIsEmpty ****/\nfunction ObjectIsEmpty(Candidate) {\n    expectObject('candidate', Candidate);\n    for (var Key in Candidate) {\n        if (Object_hasOwnProperty(Candidate, Key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**** ObjectIsNotEmpty ****/\nfunction ObjectIsNotEmpty(Candidate) {\n    return !ObjectIsEmpty(Candidate);\n}\n/**** StringIsEmpty ****/\nfunction StringIsEmpty(Candidate) {\n    return /^\\s*$/.test(Candidate);\n}\n/**** StringIsNotEmpty ****/\nfunction StringIsNotEmpty(Candidate) {\n    return !StringIsEmpty(Candidate);\n}\n/**** constrained ****/\nfunction constrained(Value, Minimum, Maximum) {\n    if (Minimum === void 0) { Minimum = -Infinity; }\n    if (Maximum === void 0) { Maximum = Infinity; }\n    return Math.max(Minimum, Math.min(Value, Maximum));\n}\n//------------------------------------------------------------------------------\n//--                             Color Utilities                              --\n//------------------------------------------------------------------------------\n// built-in color names (see http://www.w3.org/TR/SVG/types.html#ColorKeywords) ----\nvar ColorSet = {\n    transparent: 'rgba(0,0,0,0,0.0)',\n    aliceblue: 'rgba(240,248,255,1.0)', lightpink: 'rgba(255,182,193,1.0)',\n    antiquewhite: 'rgba(250,235,215,1.0)', lightsalmon: 'rgba(255,160,122,1.0)',\n    aqua: 'rgba(0,255,255,1.0)', lightseagreen: 'rgba(32,178,170,1.0)',\n    aquamarine: 'rgba(127,255,212,1.0)', lightskyblue: 'rgba(135,206,250,1.0)',\n    azure: 'rgba(240,255,255,1.0)', lightslategray: 'rgba(119,136,153,1.0)',\n    beige: 'rgba(245,245,220,1.0)', lightslategrey: 'rgba(119,136,153,1.0)',\n    bisque: 'rgba(255,228,196,1.0)', lightsteelblue: 'rgba(176,196,222,1.0)',\n    black: 'rgba(0,0,0,1.0)', lightyellow: 'rgba(255,255,224,1.0)',\n    blanchedalmond: 'rgba(255,235,205,1.0)', lime: 'rgba(0,255,0,1.0)',\n    blue: 'rgba(0,0,255,1.0)', limegreen: 'rgba(50,205,50,1.0)',\n    blueviolet: 'rgba(138,43,226,1.0)', linen: 'rgba(250,240,230,1.0)',\n    brown: 'rgba(165,42,42,1.0)', magenta: 'rgba(255,0,255,1.0)',\n    burlywood: 'rgba(222,184,135,1.0)', maroon: 'rgba(128,0,0,1.0)',\n    cadetblue: 'rgba(95,158,160,1.0)', mediumaquamarine: 'rgba(102,205,170,1.0)',\n    chartreuse: 'rgba(127,255,0,1.0)', mediumblue: 'rgba(0,0,205,1.0)',\n    chocolate: 'rgba(210,105,30,1.0)', mediumorchid: 'rgba(186,85,211,1.0)',\n    coral: 'rgba(255,127,80,1.0)', mediumpurple: 'rgba(147,112,219,1.0)',\n    cornflowerblue: 'rgba(100,149,237,1.0)', mediumseagreen: 'rgba(60,179,113,1.0)',\n    cornsilk: 'rgba(255,248,220,1.0)', mediumslateblue: 'rgba(123,104,238,1.0)',\n    crimson: 'rgba(220,20,60,1.0)', mediumspringgreen: 'rgba(0,250,154,1.0)',\n    cyan: 'rgba(0,255,255,1.0)', mediumturquoise: 'rgba(72,209,204,1.0)',\n    darkblue: 'rgba(0,0,139,1.0)', mediumvioletred: 'rgba(199,21,133,1.0)',\n    darkcyan: 'rgba(0,139,139,1.0)', midnightblue: 'rgba(25,25,112,1.0)',\n    darkgoldenrod: 'rgba(184,134,11,1.0)', mintcream: 'rgba(245,255,250,1.0)',\n    darkgray: 'rgba(169,169,169,1.0)', mistyrose: 'rgba(255,228,225,1.0)',\n    darkgreen: 'rgba(0,100,0,1.0)', moccasin: 'rgba(255,228,181,1.0)',\n    darkgrey: 'rgba(169,169,169,1.0)', navajowhite: 'rgba(255,222,173,1.0)',\n    darkkhaki: 'rgba(189,183,107,1.0)', navy: 'rgba(0,0,128,1.0)',\n    darkmagenta: 'rgba(139,0,139,1.0)', oldlace: 'rgba(253,245,230,1.0)',\n    darkolivegreen: 'rgba(85,107,47,1.0)', olive: 'rgba(128,128,0,1.0)',\n    darkorange: 'rgba(255,140,0,1.0)', olivedrab: 'rgba(107,142,35,1.0)',\n    darkorchid: 'rgba(153,50,204,1.0)', orange: 'rgba(255,165,0,1.0)',\n    darkred: 'rgba(139,0,0,1.0)', orangered: 'rgba(255,69,0,1.0)',\n    darksalmon: 'rgba(233,150,122,1.0)', orchid: 'rgba(218,112,214,1.0)',\n    darkseagreen: 'rgba(143,188,143,1.0)', palegoldenrod: 'rgba(238,232,170,1.0)',\n    darkslateblue: 'rgba(72,61,139,1.0)', palegreen: 'rgba(152,251,152,1.0)',\n    darkslategray: 'rgba(47,79,79,1.0)', paleturquoise: 'rgba(175,238,238,1.0)',\n    darkslategrey: 'rgba(47,79,79,1.0)', palevioletred: 'rgba(219,112,147,1.0)',\n    darkturquoise: 'rgba(0,206,209,1.0)', papayawhip: 'rgba(255,239,213,1.0)',\n    darkviolet: 'rgba(148,0,211,1.0)', peachpuff: 'rgba(255,218,185,1.0)',\n    deeppink: 'rgba(255,20,147,1.0)', peru: 'rgba(205,133,63,1.0)',\n    deepskyblue: 'rgba(0,191,255,1.0)', pink: 'rgba(255,192,203,1.0)',\n    dimgray: 'rgba(105,105,105,1.0)', plum: 'rgba(221,160,221,1.0)',\n    dimgrey: 'rgba(105,105,105,1.0)', powderblue: 'rgba(176,224,230,1.0)',\n    dodgerblue: 'rgba(30,144,255,1.0)', purple: 'rgba(128,0,128,1.0)',\n    firebrick: 'rgba(178,34,34,1.0)', red: 'rgba(255,0,0,1.0)',\n    floralwhite: 'rgba(255,250,240,1.0)', rosybrown: 'rgba(188,143,143,1.0)',\n    forestgreen: 'rgba(34,139,34,1.0)', royalblue: 'rgba(65,105,225,1.0)',\n    fuchsia: 'rgba(255,0,255,1.0)', saddlebrown: 'rgba(139,69,19,1.0)',\n    gainsboro: 'rgba(220,220,220,1.0)', salmon: 'rgba(250,128,114,1.0)',\n    ghostwhite: 'rgba(248,248,255,1.0)', sandybrown: 'rgba(244,164,96,1.0)',\n    gold: 'rgba(255,215,0,1.0)', seagreen: 'rgba(46,139,87,1.0)',\n    goldenrod: 'rgba(218,165,32,1.0)', seashell: 'rgba(255,245,238,1.0)',\n    gray: 'rgba(128,128,128,1.0)', sienna: 'rgba(160,82,45,1.0)',\n    green: 'rgba(0,128,0,1.0)', silver: 'rgba(192,192,192,1.0)',\n    greenyellow: 'rgba(173,255,47,1.0)', skyblue: 'rgba(135,206,235,1.0)',\n    grey: 'rgba(128,128,128,1.0)', slateblue: 'rgba(106,90,205,1.0)',\n    honeydew: 'rgba(240,255,240,1.0)', slategray: 'rgba(112,128,144,1.0)',\n    hotpink: 'rgba(255,105,180,1.0)', slategrey: 'rgba(112,128,144,1.0)',\n    indianred: 'rgba(205,92,92,1.0)', snow: 'rgba(255,250,250,1.0)',\n    indigo: 'rgba(75,0,130,1.0)', springgreen: 'rgba(0,255,127,1.0)',\n    ivory: 'rgba(255,255,240,1.0)', steelblue: 'rgba(70,130,180,1.0)',\n    khaki: 'rgba(240,230,140,1.0)', tan: 'rgba(210,180,140,1.0)',\n    lavender: 'rgba(230,230,250,1.0)', teal: 'rgba(0,128,128,1.0)',\n    lavenderblush: 'rgba(255,240,245,1.0)', thistle: 'rgba(216,191,216,1.0)',\n    lawngreen: 'rgba(124,252,0,1.0)', tomato: 'rgba(255,99,71,1.0)',\n    lemonchiffon: 'rgba(255,250,205,1.0)', turquoise: 'rgba(64,224,208,1.0)',\n    lightblue: 'rgba(173,216,230,1.0)', violet: 'rgba(238,130,238,1.0)',\n    lightcoral: 'rgba(240,128,128,1.0)', wheat: 'rgba(245,222,179,1.0)',\n    lightcyan: 'rgba(224,255,255,1.0)', white: 'rgba(255,255,255,1.0)',\n    lightgoldenrodyellow: 'rgba(250,250,210,1.0)', whitesmoke: 'rgba(245,245,245,1.0)',\n    lightgray: 'rgba(211,211,211,1.0)', yellow: 'rgba(255,255,0,1.0)',\n    lightgreen: 'rgba(144,238,144,1.0)', yellowgreen: 'rgba(154,205,50,1.0)',\n    lightgrey: 'rgba(211,211,211,1.0)',\n};\n/**** HexColor - converts a given color to #rrggbbaa ****/\nfunction HexColor(Color) {\n    var lowerColor = Color.toLowerCase();\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n        // @ts-ignore TS dislikes indexing with literal keys\n        Color = ColorSet[lowerColor];\n    } // do not return here as color is now in RGBA format\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n        return Color + 'FF';\n    }\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n        return Color;\n    }\n    var HexDigit = '0123456789ABCDEF';\n    function dec2hex(Value) {\n        if (Value > 255) {\n            Value = 255;\n        }\n        return HexDigit[Math.trunc(Value / 16)] + HexDigit[Value % 16];\n    }\n    var RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i; // not perfect\n    var Match = RGBPattern.exec(Color);\n    if (Match != null) {\n        return ('#' +\n            dec2hex(parseInt(Match[1], 10)) +\n            dec2hex(parseInt(Match[2], 10)) +\n            dec2hex(parseInt(Match[3], 10)) + 'FF');\n    }\n    var RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([01]?[.][0-9]+|[01])\\)$/i; // not perfect\n    Match = RGBAPattern.exec(Color);\n    if (Match != null) {\n        return ('#' +\n            dec2hex(parseInt(Match[1], 10)) +\n            dec2hex(parseInt(Match[2], 10)) +\n            dec2hex(parseInt(Match[3], 10)) +\n            dec2hex(parseFloat(Match[4])));\n    }\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification');\n}\n/**** RGBAColor - converts a given color to RGBA(r,g,b,a) ****/\nfunction RGBAColor(Color) {\n    var lowerColor = Color.toLowerCase();\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n        // @ts-ignore TS dislikes indexing with literal keys\n        return ColorSet[lowerColor]; // color is already in RGBA format\n    }\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n        return ('rgba(' +\n            parseInt(Color.slice(1, 3), 16) + ',' +\n            parseInt(Color.slice(3, 5), 16) + ',' +\n            parseInt(Color.slice(5, 7), 16) + ', 1' +\n            ')');\n    }\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n        return ('rgba(' +\n            parseInt(Color.slice(1, 3), 16) + ',' +\n            parseInt(Color.slice(3, 5), 16) + ',' +\n            parseInt(Color.slice(5, 7), 16) + ',' +\n            (parseInt(Color.slice(7), 16) / 255) +\n            ')');\n    }\n    var RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i; //not perfect\n    var Match = RGBPattern.exec(Color);\n    if (Match != null) {\n        return Color.slice(0, Color.length - 1) + ',1)';\n    }\n    var RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([0]?[.][0-9]+|[01])\\)$/i; // not perfect\n    Match = RGBAPattern.exec(Color);\n    if (Match != null) {\n        return Color;\n    }\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification');\n}\n/**** shortHexColor - converts a given color into #RRGGBB ****/\nfunction shortHexColor(Color) {\n    return HexColor(Color).slice(0, 7);\n}\n\nexport { ColorSet, FunctionWithName, HTMLsafe, HexColor, MarkDownSafe, ObjectIsEmpty, ObjectIsNotEmpty, ObjectMergedWith, Object_hasOwnProperty, Object_isPrototypeOf, Object_propertyIsEnumerable, Object_toLocaleString, Object_toString, Object_valueOf, RGBAColor, StringIsEmpty, StringIsNotEmpty, ValidatorForClassifier, ValueExists, ValueInheritsFrom, ValueIsAnonymousFunction, ValueIsArray, ValueIsBoolean, ValueIsCardinal, ValueIsColor, ValueIsDate, ValueIsEMailAddress, ValueIsEmptyString, ValueIsError, ValueIsFiniteNumber, ValueIsFunction, ValueIsInstanceOf, ValueIsInteger, ValueIsIntegerInRange, ValueIsList, ValueIsListSatisfying, ValueIsMissing, ValueIsNaN, ValueIsNamedFunction, ValueIsNativeFunction, ValueIsNonEmptyString, ValueIsNumber, ValueIsNumberInRange, ValueIsObject, ValueIsOneOf, ValueIsOrdinal, ValueIsPlainObject, ValueIsPromise, ValueIsRegExp, ValueIsScriptedFunction, ValueIsString, ValueIsStringMatching, ValueIsText, ValueIsTextline, ValueIsURL, ValueIsVanillaObject, ValuesAreEqual, ValuesDiffer, acceptNil, allowAnonymousFunction, allowArray, allowBoolean, allowCardinal, allowColor, allowDate, allowEMailAddress, allowError, allowFiniteNumber, allowFunction, allowInstanceOf, allowInteger, allowIntegerInRange, allowList, allowListSatisfying, allowNaN, allowNamedFunction, allowNativeFunction, allowNonEmptyString, allowNumber, allowNumberInRange, allowObject, allowOneOf, allowOrdinal, allowPlainObject, allowPromise, allowRegExp, allowScriptedFunction, allowString, allowStringMatching, allowText, allowTextline, allowURL, allowValueInheritingFrom, allowVanillaObject, allowedAnonymousFunction, allowedArray, allowedBoolean, allowedCardinal, allowedColor, allowedDate, allowedEMailAddress, allowedError, allowedFiniteNumber, allowedFunction, allowedInstanceOf, allowedInteger, allowedIntegerInRange, allowedList, allowedListSatisfying, allowedNaN, allowedNamedFunction, allowedNativeFunction, allowedNonEmptyString, allowedNumber, allowedNumberInRange, allowedObject, allowedOneOf, allowedOrdinal, allowedPlainObject, allowedPromise, allowedRegExp, allowedScriptedFunction, allowedString, allowedStringMatching, allowedText, allowedTextline, allowedURL, allowedValueInheritingFrom, allowedVanillaObject, constrained, escaped, expectAnonymousFunction, expectArray, expectBoolean, expectCardinal, expectColor, expectDate, expectEMailAddress, expectError, expectFiniteNumber, expectFunction, expectInstanceOf, expectInteger, expectIntegerInRange, expectList, expectListSatisfying, expectNaN, expectNamedFunction, expectNativeFunction, expectNonEmptyString, expectNumber, expectNumberInRange, expectObject, expectOneOf, expectOrdinal, expectPlainObject, expectPromise, expectRegExp, expectScriptedFunction, expectString, expectStringMatching, expectText, expectTextline, expectURL, expectValue, expectValueInheritingFrom, expectVanillaObject, expectedAnonymousFunction, expectedArray, expectedBoolean, expectedCardinal, expectedColor, expectedDate, expectedEMailAddress, expectedError, expectedFiniteNumber, expectedFunction, expectedInstanceOf, expectedInteger, expectedIntegerInRange, expectedList, expectedListSatisfying, expectedNaN, expectedNamedFunction, expectedNativeFunction, expectedNonEmptyString, expectedNumber, expectedNumberInRange, expectedObject, expectedOneOf, expectedOrdinal, expectedPlainObject, expectedPromise, expectedRegExp, expectedScriptedFunction, expectedString, expectedStringMatching, expectedText, expectedTextline, expectedURL, expectedValue, expectedValueInheritingFrom, expectedVanillaObject, global, quotable, quoted, rejectNil, shortHexColor, throwError, unescaped, validatedArgument };\n//# sourceMappingURL=javascript-interface-library.esm.js.map\n","//----------------------------------------------------------------------------//\n//       voltcloud-for-servers - a simple VoltCloud library for servers       //\n//----------------------------------------------------------------------------//\n\n  import {\n    throwError, quoted,\n    ValueIsString, ValueIsNonEmptyString,\n    expectNonEmptyString, expectPlainObject,\n    allowEMailAddress, expectEMailAddress, expectURL,\n    ValidatorForClassifier, acceptNil, rejectNil\n  } from 'javascript-interface-library'\n\n  const https = require('https')\n\n/**** VoltCloud-specific types and constants ****/\n\n  export const maxStorageKeyLength   = 255      // as mentioned in REST API docs\n  export const maxStorageValueLength = 1048574           // see discussion forum\n\n  export type VC_ApplicationName = string    // mainly for illustrative purposes\n\n  export type VC_ApplicationRecord = {\n    id:string, owner:string, subdomain:string, disabled:boolean,\n    url:string, canonical_domain?:string,\n    confirmation_url?:string, reset_url?:string,\n    last_upload?:string, nice_links:boolean,\n    cors_type:string, cors_domain?:string,\n    frame_type:string, frame_domain?:string,\n  }\n\n  export type VC_ApplicationUpdate = {\n    subdomain?:string, disabled?:boolean,\n    canonical_domain?:string,\n    confirmation_url?:string, reset_url?:string,\n    nice_links?:boolean,\n    cors_type?:string, cors_domain?:string,\n    frame_type?:string, frame_domain?:string,\n  }\n\n  export type VC_CustomerRecord = {\n    id:string, email:string, first_name?:string, last_name?:string,\n    confirmed:boolean, admin:boolean, meta?:any\n  }\n\n  export type VC_CustomerUpdate = {\n    email?:string,\n    password?:{ old:string, new:string, confirmation:string },\n    first_name?:string, last_name?:string\n  }\n\n  export type VC_StorageKey   = string       // mainly for illustrative purposes\n  export type VC_StorageValue = string | undefined                       // dto.\n  export type VC_StorageSet   = { [Key:string]:VC_StorageValue }\n\n/**** internal constants and variables ****/\n\n  const Timeout = 30 * 1000                       // request timeout given in ms\n\n  const DashboardURL = 'https://dashboard.voltcloud.io'\n  const DashboardId  = 'RpYCMN'\n\n  let currentDeveloperId:       string | undefined\n  let currentDeveloperAddress:  string | undefined\n  let currentDeveloperPassword: string | undefined   // stored for token refresh\n  let currentAccessToken:       string | undefined\n\n  let currentApplicationId:  string | undefined\n  let currentApplicationURL: string | undefined\n\n  let currentCustomerId:      string | undefined\n  let currentCustomerAddress: string | undefined\n\n/**** actOnBehalfOfDeveloper ****/\n\n  export async function actOnBehalfOfDeveloper (\n    EMailAddress:string, Password:string\n  ):Promise<void> {\n    expectEMailAddress('VoltCloud developer email address',EMailAddress)\n    expectPassword         ('VoltCloud developer password',Password)\n\n    await loginDeveloper(EMailAddress,Password)\n  }\n\n/**** ApplicationRecords ****/\n\n  export async function ApplicationRecords ():Promise<VC_ApplicationRecord[]> {\n    assertDeveloperFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/app'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response || []\n  }\n\n/**** focusOnApplication - async for for the sake of systematics only ****/\n\n  export async function focusOnApplication (\n    ApplicationId:string\n  ):Promise<void> {\n    expectNonEmptyString('VoltCloud application id',ApplicationId)\n\n//  assertDeveloperFocus()               // will be done by \"ApplicationRecords\"\n\n    currentApplicationId  = undefined\n    currentApplicationURL = undefined\n\n    let ApplicationRecordList = await ApplicationRecords()\n    for (let i = 0, l = ApplicationRecordList.length; i < l; i++) {\n      let ApplicationRecord = ApplicationRecordList[i]\n      if (ApplicationRecord.id === ApplicationId) {\n        currentApplicationId  = ApplicationId\n        currentApplicationURL = ApplicationRecord.url\n        return\n      }\n    }\n\n    throwError(\n      'NoSuchApplication: no application with id ' + quoted(ApplicationId) +\n      ' found for the currently focused developer'\n    )\n  }\n\n/**** focusOnApplicationCalled ****/\n\n  export async function focusOnApplicationCalled (\n    ApplicationName:VC_ApplicationName\n  ):Promise<void> {\n    expectApplicationName('VoltCloud application name',ApplicationName)\n\n//  assertDeveloperFocus()               // will be done by \"ApplicationRecords\"\n\n    currentApplicationId  = undefined\n    currentApplicationURL = undefined\n\n    let ApplicationRecordList = await ApplicationRecords()\n    for (let i = 0, l = ApplicationRecordList.length; i < l; i++) {\n      let ApplicationRecord = ApplicationRecordList[i]\n      if (ApplicationRecord.subdomain === ApplicationName) {\n        currentApplicationId  = ApplicationRecord.id\n        currentApplicationURL = ApplicationRecord.url\n        return\n      }\n    }\n\n    throwError(\n      'NoSuchApplication: no application called ' + quoted(ApplicationName) +\n      ' found for the currently focused developer'\n    )\n  }\n\n/**** focusOnNewApplication ****/\n\n  export async function focusOnNewApplication ():Promise<void> {\n    assertDeveloperFocus()               // will be done by \"ApplicationRecords\"\n\n    currentApplicationId  = undefined\n    currentApplicationURL = undefined\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'POST', '{{dashboard_url}}/api/app'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    currentApplicationId  = Response.id\n    currentApplicationURL = Response.url\n  }\n\n/**** ApplicationRecord ****/\n\n  export async function ApplicationRecord ():Promise<VC_ApplicationRecord> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/app/{{application_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response\n  }\n\n/**** changeApplicationNameTo ****/\n\n  export async function changeApplicationNameTo (\n    ApplicationName:VC_ApplicationName\n  ):Promise<void> {\n    expectApplicationName('VoltCloud application name',ApplicationName)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'PUT', '{{dashboard_url}}/api/app/{{application_id}}',{\n          subdomain:ApplicationName\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** updateApplicationRecordBy ****/\n\n  export async function updateApplicationRecordBy (\n    Settings:VC_ApplicationUpdate\n  ):Promise<void> {\n    expectPlainObject('VoltCloud application settings',Settings)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'PUT', '{{dashboard_url}}/api/app/{{application_id}}',Settings\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** uploadToApplication ****/\n\n  export async function uploadToApplication (\n    Archive:Blob\n  ):Promise<void> {\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n\n  }\n\n/**** deleteApplication ****/\n\n  export async function deleteApplication ():Promise<void> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{dashboard_url}}/api/app/{{application_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** ApplicationStorage ****/\n\n  export async function ApplicationStorage ():Promise<VC_StorageSet> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/storage/{{application_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response || {}\n  }\n\n/**** ApplicationStorageEntry ****/\n\n  export async function ApplicationStorageEntry (\n    StorageKey:VC_StorageKey\n  ):Promise<VC_StorageValue> {\n    expectStorageKey('VoltCloud application storage key',StorageKey)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/storage/{{application_id}}/key/{{application_storage_key}}', {\n          application_storage_key: StorageKey\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response\n  }\n\n/**** setApplicationStorageEntryTo ****/\n\n  export async function setApplicationStorageEntryTo (\n    StorageKey:VC_StorageKey, StorageValue:VC_StorageValue\n  ):Promise<void> {\n    expectStorageKey    ('VoltCloud application storage key',StorageKey)\n    expectStorageValue('VoltCloud application storage value',StorageValue)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'PUT', '{{dashboard_url}}/api/storage/{{application_id}}/key/{{application_storage_key}}', {\n          application_storage_key: StorageKey\n        }, StorageValue\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** deleteApplicationStorageEntry ****/\n\n  export async function deleteApplicationStorageEntry (\n    StorageKey:VC_StorageKey\n  ):Promise<void> {\n    expectStorageKey('VoltCloud application storage key',StorageKey)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{dashboard_url}}/api/storage/{{application_id}}/key/{{application_storage_key}}', {\n          application_storage_key: StorageKey\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** clearApplicationStorage ****/\n\n  export async function clearApplicationStorage ():Promise<void> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{application_url}}/api/storage/{{application_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** CustomerRecords ****/\n\n  export async function CustomerRecords ():Promise<VC_CustomerRecord[]> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/app/{{application_id}}/users'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response || []\n  }\n\n/**** focusOnCustomer - async for for the sake of systematics only ****/\n\n  export async function focusOnCustomer (\n    CustomerId:string\n  ):Promise<void> {\n    expectNonEmptyString('VoltCloud customer id',CustomerId)\n\n//  assertDeveloperFocus()                  // will be done by \"CustomerRecords\"\n//  assertApplicationFocus()                                             // dto.\n\n    currentCustomerId      = undefined\n    currentCustomerAddress = undefined\n\n    let CustomerRecordList = await CustomerRecords()\n    for (let i = 0, l = CustomerRecordList.length; i < l; i++) {\n      let CustomerRecord = CustomerRecordList[i]\n      if (CustomerRecord.id === CustomerId) {\n        currentCustomerId      = CustomerId\n        currentCustomerAddress = CustomerRecord.email\n        return\n      }\n    }\n\n    throwError(\n      'NoSuchCustomer: no customer with id ' + quoted(CustomerId) +\n      ' found for the currently focused application'\n    )\n  }\n\n/**** focusOnCustomerWithAddress ****/\n\n  export async function focusOnCustomerWithAddress (\n    CustomerAddress:string\n  ):Promise<void> {\n    expectEMailAddress('VoltCloud customer email address',CustomerAddress)\n\n//  assertDeveloperFocus()                  // will be done by \"CustomerRecords\"\n//  assertApplicationFocus()                                             // dto.\n\n    currentCustomerId      = undefined\n    currentCustomerAddress = undefined\n\n    let CustomerRecordList = await CustomerRecords()\n    for (let i = 0, l = CustomerRecordList.length; i < l; i++) {\n      let CustomerRecord = CustomerRecordList[i]\n      if (CustomerRecord.email === CustomerAddress) {\n        currentCustomerId      = CustomerRecord.id\n        currentCustomerAddress = CustomerAddress\n        return\n      }\n    }\n\n    throwError(\n      'NoSuchCustomer: no customer with email address ' + quoted(CustomerAddress) +\n      ' found for the currently focused application'\n    )\n  }\n\n/**** focusOnNewCustomer ****/\n\n  export async function focusOnNewCustomer (\n    EMailAddress:string, Password:string\n  ):Promise<void> {\n    expectEMailAddress('VoltCloud customer email address',EMailAddress)\n    expectPassword         ('VoltCloud customer password',Password)\n\n//  assertDeveloperFocus()                             // not really needed here\n    assertApplicationFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'public', 'POST', '{{application_url}}/api/auth/register', null, {\n          email:        EMailAddress,\n          password:     Password,\n          confirmation: Password,\n          scope:        currentApplicationId\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 404: throwError('NoSuchApplication: the currently focused application could not be found')\n        case 409: throwError('UserExists: the given email address is already used')\n        case 422: throwError('BadPassword: the given password does not meet the VoltCloud requirements')\n        default: throw Signal\n      }\n    }\n\n    if ((Response != null) && ValueIsString(Response.id)) {\n      currentCustomerId      = Response.id\n      currentCustomerAddress = EMailAddress\n    } else {\n      throwError('InternalError: could not analyze response for registration request')\n    }\n  }\n\n/**** resendConfirmationEMailToCustomer ****/\n\n  export async function resendConfirmationEMailToCustomer (\n    EMailAddress?:string\n  ):Promise<void> {\n    allowEMailAddress('VoltCloud customer email address',EMailAddress)\n\n//  assertDeveloperFocus()                             // not really needed here\n    assertApplicationFocus()\n\n    if (EMailAddress == null) {\n      assertCustomerFocus()\n      EMailAddress = currentCustomerAddress\n    }\n\n    try {\n      await ResponseOf(\n        'public', 'POST', '{{application_url}}/api/auth/resend', null, {\n          email: EMailAddress,\n          scope: currentApplicationId\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 402: throwError('NoSuchUser: the given user is unknown to the currently focused application')\n        case 404: throwError('NoSuchApplication: the currently focused application could not be found')\n        case 501: throwError('Unsupported: the currently focused application does not support customer confirmations')\n        default: throw Signal\n      }\n    }\n  }\n\n/**** confirmCustomerUsing ****/\n\n  export async function confirmCustomerUsing (Token:string):Promise<void> {\n    expectNonEmptyString('VoltCloud customer confirmation token',Token)\n\n//  assertDeveloperFocus()                             // not really needed here\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'public', 'POST', '{{application_url}}/api/auth/confirm', null, {\n          token: Token\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 401: throwError('BadToken: the given token can not be recognized')\n        default: throw Signal\n      }\n    }\n  }\n\n/**** startPasswordResetForCustomer ****/\n\n  export async function startPasswordResetForCustomer (\n    EMailAddress?:string\n  ):Promise<void> {\n    allowEMailAddress('VoltCloud customer email address',EMailAddress)\n\n//  assertDeveloperFocus()                             // not really needed here\n    assertApplicationFocus()\n\n    if (EMailAddress == null) {\n      assertCustomerFocus()\n      EMailAddress = currentCustomerAddress\n    }\n\n    try {\n      await ResponseOf(\n        'public', 'POST', '{{application_url}}/api/auth/forgot', null, {\n          email: EMailAddress,\n          scope: currentApplicationId\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 402: throwError('NoSuchUser: the given user is unknown to the currently focused application')\n        case 404: throwError('NoSuchApplication: the currently focused application could not be found')\n        case 501: throwError('Unsupported: the currently focused application does not support password resets')\n        default: throw Signal\n      }\n    }\n  }\n\n/**** resetCustomerPasswordUsing ****/\n\n  export async function resetCustomerPasswordUsing (\n    Token:string, Password:string\n  ):Promise<void> {\n    expectNonEmptyString('VoltCloud password reset token',Token)\n    expectPassword         ('VoltCloud customer password',Password)\n\n//  assertDeveloperFocus()                             // not really needed here\n    assertApplicationFocus()\n\n    try {\n      await ResponseOf(\n        'public', 'POST', '{{application_url}}/api/auth/reset', null, {\n          token:        Token,\n          password:     Password,\n          confirmation: Password\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 401: throwError('BadToken: the given token can not be recognized')\n        case 422: throwError('BadPassword: the given password does not meet the VoltCloud requirements')\n        default: throw Signal\n      }\n    }\n  }\n\n/**** deleteCustomer ****/\n\n  export async function deleteCustomer ():Promise<void> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{dashboard_url}}/api/user/{{customer_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** CustomerStorage ****/\n\n  export async function CustomerStorage ():Promise<VC_StorageSet> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/storage/{{customer_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response || {}\n  }\n\n/**** CustomerStorageEntry ****/\n\n  export async function CustomerStorageEntry (\n    StorageKey:VC_StorageKey\n  ):Promise<VC_StorageValue> {\n    expectStorageKey('VoltCloud customer storage key',StorageKey)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'private', 'GET', '{{dashboard_url}}/api/storage/{{customer_id}}/key/{{customer_storage_key}}', {\n          customer_storage_key: StorageKey\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n\n    return Response\n  }\n\n/**** setCustomerStorageEntryTo ****/\n\n  export async function setCustomerStorageEntryTo (\n    StorageKey:VC_StorageKey, StorageValue:VC_StorageValue\n  ):Promise<void> {\n    expectStorageKey    ('VoltCloud customer storage key',StorageKey)\n    expectStorageValue('VoltCloud customer storage value',StorageValue)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'PUT', '{{dashboard_url}}/api/storage/{{customer_id}}/key/{{customer_storage_key}}', {\n          customer_storage_key: StorageKey\n        },StorageValue\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** deleteCustomerStorageEntry ****/\n\n  export async function deleteCustomerStorageEntry (\n    StorageKey:VC_StorageKey\n  ):Promise<void> {\n    expectStorageKey('VoltCloud customer storage key',StorageKey)\n\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{dashboard_url}}/api/storage/{{customer_id}}/key/{{customer_storage_key}}', {\n          customer_storage_key: StorageKey\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** clearCustomerStorage ****/\n\n  export async function clearCustomerStorage ():Promise<void> {\n    assertDeveloperFocus()\n    assertApplicationFocus()\n    assertCustomerFocus()\n\n    try {\n      await ResponseOf(\n        'private', 'DELETE', '{{application_url}}/api/storage/{{customer_id}}'\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n// no knowledge about HTTP status Codes yet\n        default: throw Signal\n      }\n    }\n  }\n\n/**** ValueIsPassword - a string following VoltCloud's password rules ****/\n\n  export function ValueIsPassword (Value:any):boolean {\n    return (\n      ValueIsString(Value) && (Value.length >= 8) &&\n      /[0-9]/.test(Value) && (Value.toLowerCase() !== Value)\n    )\n  }\n\n/**** allow/expect[ed]Password ****/\n\n  export const allowPassword = ValidatorForClassifier(\n    ValueIsPassword, acceptNil, 'valid VoltCloud password'\n  ), allowedPassword = allowPassword\n\n  export const expectPassword = ValidatorForClassifier(\n    ValueIsPassword, rejectNil, 'valid VoltCloud password'\n  ), expectedPassword = expectPassword\n\n/**** ValueIsApplicationName - a string suitable as a VoltCloud application name ****/\n\n  export function ValueIsApplicationName (Value:any):boolean {\n    return (\n      ValueIsString(Value) && (Value.length >= 1) &&\n      /^[0-9a-z][-0-9a-z]*$/.test(Value)\n    )\n  }\n\n/**** allow/expect[ed]ApplicationName ****/\n\n  export const allowApplicationName = ValidatorForClassifier(\n    ValueIsApplicationName, acceptNil, 'valid VoltCloud application name'\n  ), allowedApplicationName = allowApplicationName\n\n  export const expectApplicationName = ValidatorForClassifier(\n    ValueIsApplicationName, rejectNil, 'valid VoltCloud application name'\n  ), expectedApplicationName = expectApplicationName\n\n/**** ValueIsStorageKey - a string suitable as a VoltCloud storage key ****/\n\n  export function ValueIsStorageKey (Value:any):boolean {\n    return ValueIsNonEmptyString(Value) && (Value.length <= maxStorageKeyLength)\n  }\n\n/**** allow/expect[ed]StorageKey ****/\n\n  export const allowStorageKey = ValidatorForClassifier(\n    ValueIsStorageKey, acceptNil, 'suitable VoltCloud storage key'\n  ), allowedStorageKey = allowStorageKey\n\n  export const expectStorageKey = ValidatorForClassifier(\n    ValueIsStorageKey, rejectNil, 'suitable VoltCloud storage key'\n  ), expectedStorageKey = expectStorageKey\n\n/**** ValueIsStorageValue - a string suitable as a VoltCloud storage value ****/\n\n  export function ValueIsStorageValue (Value:any):boolean {\n    return ValueIsNonEmptyString(Value) && (Value.length <= maxStorageValueLength)\n  }\n\n/**** allow/expect[ed]StorageValue ****/\n\n  export const allowStorageValue = ValidatorForClassifier(\n    ValueIsStorageValue, acceptNil, 'suitable VoltCloud storage value'\n  ), allowedStorageValue = allowStorageValue\n\n  export const expectStorageValue = ValidatorForClassifier(\n    ValueIsStorageValue, rejectNil, 'suitable VoltCloud storage value'\n  ), expectedStorageValue = expectStorageValue\n\n/**** assertApplicationFocus ****/\n\n  function assertApplicationFocus ():void {\n    if (currentApplicationId == null) throwError(\n      'InvalidState: please focus on a specific VoltCloud application first'\n    )\n  }\n\n/**** assertDeveloperFocus ****/\n\n  function assertDeveloperFocus ():void {\n    if (currentDeveloperId == null) throwError(\n      'InvalidState: please focus on a specific VoltCloud developer first'\n    )\n  }\n\n/**** assertCustomerFocus ****/\n\n  function assertCustomerFocus ():void {\n    if (currentAccessToken == null) throwError(\n      'InvalidState: please focus on a specific VoltCloud application customer first'\n    )\n  }\n\n/**** loginDeveloper ****/\n\n  async function loginDeveloper (\n    EMailAddress:string, Password:string\n  ):Promise<void> {\n    currentDeveloperId       = undefined           // avoid re-try after failure\n    currentDeveloperAddress  = undefined                                 // dto.\n    currentDeveloperPassword = undefined                                 // dto.\n    currentAccessToken       = undefined                                 // dto.\n\n    let Response\n    try {\n      Response = await ResponseOf(\n        'public', 'POST', '{{dashboard_url}}/api/auth/login', {\n          grant_type: 'password',\n          username:   EMailAddress,\n          password:   Password,\n          scope:      DashboardId\n        }\n      )\n    } catch (Signal) {\n      switch (Signal.HTTPStatus) {\n        case 401: throwError('LoginFailed: developer could not be logged in')\n        case 402: throwError('NoSuchUser: the given developer is unknown')\n        default: throw Signal\n      }\n    }\n\n    if (\n      (Response != null) &&\n      (Response.token_type === 'bearer') && ValueIsString(Response.access_token) &&\n      ValueIsString(Response.user_id)\n    ) {\n      currentDeveloperId       = Response.user_id\n      currentDeveloperAddress  = EMailAddress\n      currentDeveloperPassword = Password\n      currentAccessToken       = Response.access_token\n    } else {\n      throwError('InternalError: could not analyze response for login request')\n    }\n  }\n\n/**** ResponseOf - simplified version for applications ****/\n\n  async function ResponseOf (\n    Mode:'public'|'private',\n    Method:'GET'|'PUT'|'POST'|'DELETE', URL:string, Parameters?:any, Data?:any,\n    firstAttempt:boolean = true\n  ):Promise<any> {\n    let fullParameters = Object.assign({}, Parameters || {}, {\n      dashboard_id:   DashboardId,\n      dashboard_url:  DashboardURL,\n      application_id: currentApplicationId,\n      application_url:currentApplicationURL,\n      customer_id:    currentCustomerId,\n    })\n\n    let resolvedURL:string = resolved(URL,fullParameters)\n    if (Method === 'GET') {\n      resolvedURL += (\n        (resolvedURL.indexOf('?') < 0 ? '?' : '&') +\n        '_=' + Date.now()\n      )\n    }\n\n    let RequestOptions = {\n      method:  Method,\n      headers: {},\n      timeout: Timeout\n    }\n      if (Mode === 'private') {\n// @ts-ignore we definitely want to index with a literal\n        RequestOptions.headers['Authorization'] = 'Bearer ' + currentAccessToken\n      }\n\n      let RequestBody:string\n      if (Data != null) {\n        if (Data instanceof Blob) {\n// <<<<\n        } else {\n          RequestBody = JSON.stringify(Data)\n// @ts-ignore we definitely want to index with a literal\n          RequestOptions.headers['Content-Type']   = 'application/json'\n// @ts-ignore we definitely want to index with a literal\n          RequestOptions.headers['Content-Length'] = RequestBody.length\n        }\n      }\n    return new Promise((resolve, reject) => {\n      let Request = https.request(resolvedURL, RequestOptions, (Response:any) => {\n        Response.on('error', (Error:any) => {\n          reject(namedError(\n            'RequestFailed: VoltCloud request failed (error code = ' +\n            quoted(Error.code) + ')'\n          ))\n        })\n\n        let ResponseData:string = ''\n        Response.on('data', (Chunk:string) => ResponseData += Chunk)\n        Response.on('end', () => {\n          let StatusCode  = Response.statusCode\n          let ContentType = Response.headers['content-type'] || ''\n          switch (true) {\n            case (StatusCode >= 200) && (StatusCode < 300):\n              switch (true) {\n                case ContentType.startsWith('application/json'):\n                  return resolve(JSON.parse(ResponseData))\n                default:\n                  return reject(namedError(\n                    'RequestFailed: unexpected response content type ' +\n                    quoted(ContentType || '(missing)'), {\n                      ContentType, HTTPResponse:ResponseData\n                    }\n                  ))\n              }\n            case (StatusCode === 401):\n              if (firstAttempt) {         // try to \"refresh\" the access token\n                return loginDeveloper(\n                  currentDeveloperAddress as string,currentDeveloperPassword as string\n                )\n                .then(() => {                // try request again, but only once\n                  ResponseOf(Mode, Method, URL, Parameters, Data, false)\n                  .then ((Result) => resolve(Result))\n                  .catch((Signal) => reject(Signal))\n                })\n                .catch((Signal) => reject(Signal))\n              }\n              return reject(namedError('AuthorizationFailure: VoltCloud request could not be authorized'))\n            default:\n              if (ContentType.startsWith('application/json')) {\n                try {          // if given, try to use a VoltCloud error message\n                  let ErrorDetails = JSON.parse(Request.responseText)\n                  if (\n                    ValueIsNonEmptyString(ErrorDetails.type) &&\n                    ValueIsNonEmptyString(ErrorDetails.message)\n                  ) {\n                    return reject(namedError(\n                      ErrorDetails.type + ': ' + ErrorDetails.message, {\n                        HTTPStatus:StatusCode, HTTPResponse:ResponseData\n                      }\n                    ))\n                  }\n                } catch (Signal) { /* otherwise create a generic error message */ }\n              }\n\n              return reject(namedError('RequestFailed: VoltCloud request failed', {\n                HTTPStatus:StatusCode, HTTPResponse:ResponseData\n              }))\n          }\n        })\n      })\n        Request.on('aborted', () => {\n          reject(namedError('RequestAborted: VoltCloud request has been aborted'))\n        })\n\n        Request.on('timeout', () => {\n          reject(namedError('RequestTimedout: VoltCloud request timed out'))\n        })\n\n        Request.on('error', (Error:any) => {\n          reject(namedError(\n            'RequestFailed: VoltCloud request failed before actually sending ' +\n            'data (error code = ' + quoted(Error.code) + ')'\n          ))\n        })\n\n        if (RequestBody != null) { Request.write(RequestBody) }\n      Request.end()\n    })\n  }\n\n/**** resolved ****/\n\n  const PlaceholderPattern = /\\{\\{([a-z0-9_-]+)\\}\\}/gi\n\n  function resolved (Text:string, VariableSet:any):string {\n    return Text.replace(PlaceholderPattern, (_, VariableName) => {\n      if (VariableSet.hasOwnProperty(VariableName)) {\n        return VariableSet[VariableName]\n      } else {\n        throwError(\n          'VariableNotFound: the given placeholder text refers to an ' +\n          'undefined variable called ' + quoted(VariableName)\n        )\n      }\n    })\n  }\n\n/**** namedError ****/\n\n  function namedError (Message:string, Details?:any):Error {\n    let Result\n      let Match = /^([$a-zA-Z][$a-zA-Z0-9]*):\\s*(\\S.+)\\s*$/.exec(Message)\n      if (Match == null) {\n        Result = new Error(Message)\n      } else {\n        Result = new Error(Match[2])\n        Result.name = Match[1]\n      }\n\n      if (Details != null) {\n        Object.assign(Result,Details)                         // not fool-proof!\n      }\n    return Result\n  }\n\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","throwError","Message","Match","exec","Error","namedError","name","ValueIsString","Value","String","emptyStringPattern","ValueIsNonEmptyString","test","valueOf","ValueIsPlainObject","Object","getPrototypeOf","prototype","EMailAddressPattern","ValueIsEMailAddress","Pattern","ValueIsStringMatching","rejectNil","acceptNil","ValidatorForClassifier","Classifier","NilIsAcceptable","Expectation","Validator","Description","Argument","ValueIsValid","escaped","Boolean","Number","validatedArgument","ClassifierName","originalFunction","desiredName","defineProperty","signal","Function","renamed","FunctionWithName","replace","expectNonEmptyString","expectPlainObject","allowEMailAddress","expectEMailAddress","Text","HexCode","charCodeAt","toString","slice","quoted","Quote","quotable","currentDeveloperId","currentDeveloperAddress","currentDeveloperPassword","currentAccessToken","currentApplicationId","currentApplicationURL","currentCustomerId","currentCustomerAddress","https","require","maxStorageValueLength","DashboardId","ApplicationRecords","assertDeveloperFocus","ResponseOf","Response","_a","HTTPStatus","Signal_1","CustomerRecords","assertApplicationFocus","Signal_12","ValueIsPassword","toLowerCase","allowPassword","allowedPassword","expectPassword","expectedPassword","ValueIsApplicationName","allowApplicationName","allowedApplicationName","expectApplicationName","expectedApplicationName","ValueIsStorageKey","allowStorageKey","allowedStorageKey","expectStorageKey","expectedStorageKey","ValueIsStorageValue","allowStorageValue","allowedStorageValue","expectStorageValue","expectedStorageValue","assertCustomerFocus","loginDeveloper","EMailAddress","Password","undefined","grant_type","username","password","scope","Signal_24","token_type","access_token","user_id","Mode","Method","URL","Parameters","Data","firstAttempt","VariableSet","fullParameters","assign","dashboard_id","dashboard_url","application_id","application_url","customer_id","resolvedURL","PlaceholderPattern","VariableName","hasOwnProperty","indexOf","Date","now","RequestOptions","method","headers","timeout","Blob","RequestBody","JSON","stringify","Request","request","on","code","ResponseData","Chunk","StatusCode","statusCode","ContentType","startsWith","parse","HTTPResponse","Result","catch","Signal","ErrorDetails","responseText","type","message","write","end","Details","Signal_3","Signal_7","StorageKey","application_storage_key","Signal_8","Signal_19","customer_storage_key","Signal_20","ApplicationName","subdomain","Signal_4","Signal_11","Signal_23","Token","token","Signal_15","Signal_6","Signal_10","Signal_18","Signal_22","ApplicationId","ApplicationRecordList","i","l","ApplicationRecord_1","id","url","ApplicationRecord_2","CustomerId","CustomerRecordList","CustomerRecord","email","CustomerAddress","Signal_2","confirmation","Signal_13","Signal_14","Signal_17","StorageValue","Signal_9","Signal_21","Signal_16","Settings","Signal_5","Archive"],"mappings":"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"}